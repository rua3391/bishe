// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/Common.proto

#include "proto/Common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2fCommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraProto_proto_2fCommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fCommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObjectProto_proto_2fCommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fCommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShaderProto_proto_2fCommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fCommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextureProto_proto_2fCommon_2eproto;
namespace Proto {
namespace Common {
class EngineDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EngineData> _instance;
} _EngineData_default_instance_;
class CameraProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraProto> _instance;
} _CameraProto_default_instance_;
class ShaderProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShaderProto> _instance;
} _ShaderProto_default_instance_;
class TextureProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TextureProto> _instance;
} _TextureProto_default_instance_;
class ObjectProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectProto> _instance;
} _ObjectProto_default_instance_;
class LightProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LightProto> _instance;
} _LightProto_default_instance_;
}  // namespace Common
}  // namespace Proto
static void InitDefaultsscc_info_CameraProto_proto_2fCommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::Common::_CameraProto_default_instance_;
    new (ptr) ::Proto::Common::CameraProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraProto_proto_2fCommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CameraProto_proto_2fCommon_2eproto}, {}};

static void InitDefaultsscc_info_EngineData_proto_2fCommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::Common::_EngineData_default_instance_;
    new (ptr) ::Proto::Common::EngineData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EngineData_proto_2fCommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_EngineData_proto_2fCommon_2eproto}, {
      &scc_info_CameraProto_proto_2fCommon_2eproto.base,
      &scc_info_ObjectProto_proto_2fCommon_2eproto.base,}};

static void InitDefaultsscc_info_LightProto_proto_2fCommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::Common::_LightProto_default_instance_;
    new (ptr) ::Proto::Common::LightProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LightProto_proto_2fCommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LightProto_proto_2fCommon_2eproto}, {}};

static void InitDefaultsscc_info_ObjectProto_proto_2fCommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::Common::_ObjectProto_default_instance_;
    new (ptr) ::Proto::Common::ObjectProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObjectProto_proto_2fCommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ObjectProto_proto_2fCommon_2eproto}, {
      &scc_info_ShaderProto_proto_2fCommon_2eproto.base,
      &scc_info_TextureProto_proto_2fCommon_2eproto.base,}};

static void InitDefaultsscc_info_ShaderProto_proto_2fCommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::Common::_ShaderProto_default_instance_;
    new (ptr) ::Proto::Common::ShaderProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShaderProto_proto_2fCommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShaderProto_proto_2fCommon_2eproto}, {}};

static void InitDefaultsscc_info_TextureProto_proto_2fCommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::Common::_TextureProto_default_instance_;
    new (ptr) ::Proto::Common::TextureProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextureProto_proto_2fCommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TextureProto_proto_2fCommon_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fCommon_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2fCommon_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fCommon_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fCommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::Common::EngineData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::Common::EngineData, camera_),
  PROTOBUF_FIELD_OFFSET(::Proto::Common::EngineData, object_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::Common::CameraProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::Common::ShaderProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::Common::ShaderProto, x_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::Common::TextureProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::Common::TextureProto, x_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::Common::ObjectProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::Common::ObjectProto, shader_),
  PROTOBUF_FIELD_OFFSET(::Proto::Common::ObjectProto, texture_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::Common::LightProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::Common::LightProto, x_),
  PROTOBUF_FIELD_OFFSET(::Proto::Common::LightProto, y_),
  PROTOBUF_FIELD_OFFSET(::Proto::Common::LightProto, z_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Proto::Common::EngineData)},
  { 7, -1, sizeof(::Proto::Common::CameraProto)},
  { 12, -1, sizeof(::Proto::Common::ShaderProto)},
  { 18, -1, sizeof(::Proto::Common::TextureProto)},
  { 24, -1, sizeof(::Proto::Common::ObjectProto)},
  { 31, -1, sizeof(::Proto::Common::LightProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::Common::_EngineData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::Common::_CameraProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::Common::_ShaderProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::Common::_TextureProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::Common::_ObjectProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::Common::_LightProto_default_instance_),
};

const char descriptor_table_protodef_proto_2fCommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022proto/Common.proto\022\014Proto.Common\"b\n\nEn"
  "gineData\022)\n\006camera\030\001 \001(\0132\031.Proto.Common."
  "CameraProto\022)\n\006object\030\002 \003(\0132\031.Proto.Comm"
  "on.ObjectProto\"\r\n\013CameraProto\"\030\n\013ShaderP"
  "roto\022\t\n\001x\030\001 \001(\r\"\031\n\014TextureProto\022\t\n\001x\030\001 \001"
  "(\r\"e\n\013ObjectProto\022)\n\006shader\030\001 \001(\0132\031.Prot"
  "o.Common.ShaderProto\022+\n\007texture\030\002 \003(\0132\032."
  "Proto.Common.TextureProto\"-\n\nLightProto\022"
  "\t\n\001x\030\001 \001(\r\022\t\n\001y\030\002 \001(\r\022\t\n\001z\030\003 \001(\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fCommon_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fCommon_2eproto_sccs[6] = {
  &scc_info_CameraProto_proto_2fCommon_2eproto.base,
  &scc_info_EngineData_proto_2fCommon_2eproto.base,
  &scc_info_LightProto_proto_2fCommon_2eproto.base,
  &scc_info_ObjectProto_proto_2fCommon_2eproto.base,
  &scc_info_ShaderProto_proto_2fCommon_2eproto.base,
  &scc_info_TextureProto_proto_2fCommon_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fCommon_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fCommon_2eproto = {
  false, false, descriptor_table_protodef_proto_2fCommon_2eproto, "proto/Common.proto", 360,
  &descriptor_table_proto_2fCommon_2eproto_once, descriptor_table_proto_2fCommon_2eproto_sccs, descriptor_table_proto_2fCommon_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_proto_2fCommon_2eproto::offsets,
  file_level_metadata_proto_2fCommon_2eproto, 6, file_level_enum_descriptors_proto_2fCommon_2eproto, file_level_service_descriptors_proto_2fCommon_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fCommon_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fCommon_2eproto)), true);
namespace Proto {
namespace Common {

// ===================================================================

class EngineData::_Internal {
 public:
  static const ::Proto::Common::CameraProto& camera(const EngineData* msg);
};

const ::Proto::Common::CameraProto&
EngineData::_Internal::camera(const EngineData* msg) {
  return *msg->camera_;
}
EngineData::EngineData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  object_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.Common.EngineData)
}
EngineData::EngineData(const EngineData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      object_(from.object_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_camera()) {
    camera_ = new ::Proto::Common::CameraProto(*from.camera_);
  } else {
    camera_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Proto.Common.EngineData)
}

void EngineData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EngineData_proto_2fCommon_2eproto.base);
  camera_ = nullptr;
}

EngineData::~EngineData() {
  // @@protoc_insertion_point(destructor:Proto.Common.EngineData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EngineData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete camera_;
}

void EngineData::ArenaDtor(void* object) {
  EngineData* _this = reinterpret_cast< EngineData* >(object);
  (void)_this;
}
void EngineData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EngineData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EngineData& EngineData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EngineData_proto_2fCommon_2eproto.base);
  return *internal_default_instance();
}


void EngineData::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Common.EngineData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_.Clear();
  if (GetArena() == nullptr && camera_ != nullptr) {
    delete camera_;
  }
  camera_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EngineData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Proto.Common.CameraProto camera = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.Common.ObjectProto object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_object(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EngineData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Common.EngineData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.Common.CameraProto camera = 1;
  if (this->has_camera()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::camera(this), target, stream);
  }

  // repeated .Proto.Common.ObjectProto object = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_object_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_object(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Common.EngineData)
  return target;
}

size_t EngineData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Common.EngineData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.Common.ObjectProto object = 2;
  total_size += 1UL * this->_internal_object_size();
  for (const auto& msg : this->object_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Proto.Common.CameraProto camera = 1;
  if (this->has_camera()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *camera_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EngineData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.Common.EngineData)
  GOOGLE_DCHECK_NE(&from, this);
  const EngineData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EngineData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.Common.EngineData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.Common.EngineData)
    MergeFrom(*source);
  }
}

void EngineData::MergeFrom(const EngineData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Common.EngineData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_.MergeFrom(from.object_);
  if (from.has_camera()) {
    _internal_mutable_camera()->::Proto::Common::CameraProto::MergeFrom(from._internal_camera());
  }
}

void EngineData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.Common.EngineData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EngineData::CopyFrom(const EngineData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Common.EngineData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EngineData::IsInitialized() const {
  return true;
}

void EngineData::InternalSwap(EngineData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  object_.InternalSwap(&other->object_);
  swap(camera_, other->camera_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EngineData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CameraProto::_Internal {
 public:
};

CameraProto::CameraProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.Common.CameraProto)
}
CameraProto::CameraProto(const CameraProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.Common.CameraProto)
}

void CameraProto::SharedCtor() {
}

CameraProto::~CameraProto() {
  // @@protoc_insertion_point(destructor:Proto.Common.CameraProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CameraProto::ArenaDtor(void* object) {
  CameraProto* _this = reinterpret_cast< CameraProto* >(object);
  (void)_this;
}
void CameraProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraProto& CameraProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraProto_proto_2fCommon_2eproto.base);
  return *internal_default_instance();
}


void CameraProto::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Common.CameraProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Common.CameraProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Common.CameraProto)
  return target;
}

size_t CameraProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Common.CameraProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.Common.CameraProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.Common.CameraProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.Common.CameraProto)
    MergeFrom(*source);
  }
}

void CameraProto::MergeFrom(const CameraProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Common.CameraProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CameraProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.Common.CameraProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraProto::CopyFrom(const CameraProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Common.CameraProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraProto::IsInitialized() const {
  return true;
}

void CameraProto::InternalSwap(CameraProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ShaderProto::_Internal {
 public:
};

ShaderProto::ShaderProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.Common.ShaderProto)
}
ShaderProto::ShaderProto(const ShaderProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  x_ = from.x_;
  // @@protoc_insertion_point(copy_constructor:Proto.Common.ShaderProto)
}

void ShaderProto::SharedCtor() {
  x_ = 0u;
}

ShaderProto::~ShaderProto() {
  // @@protoc_insertion_point(destructor:Proto.Common.ShaderProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShaderProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ShaderProto::ArenaDtor(void* object) {
  ShaderProto* _this = reinterpret_cast< ShaderProto* >(object);
  (void)_this;
}
void ShaderProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShaderProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShaderProto& ShaderProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShaderProto_proto_2fCommon_2eproto.base);
  return *internal_default_instance();
}


void ShaderProto::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Common.ShaderProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  x_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShaderProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShaderProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Common.ShaderProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_x(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Common.ShaderProto)
  return target;
}

size_t ShaderProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Common.ShaderProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_x());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShaderProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.Common.ShaderProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ShaderProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShaderProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.Common.ShaderProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.Common.ShaderProto)
    MergeFrom(*source);
  }
}

void ShaderProto::MergeFrom(const ShaderProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Common.ShaderProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
}

void ShaderProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.Common.ShaderProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShaderProto::CopyFrom(const ShaderProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Common.ShaderProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShaderProto::IsInitialized() const {
  return true;
}

void ShaderProto::InternalSwap(ShaderProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(x_, other->x_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShaderProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TextureProto::_Internal {
 public:
};

TextureProto::TextureProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.Common.TextureProto)
}
TextureProto::TextureProto(const TextureProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  x_ = from.x_;
  // @@protoc_insertion_point(copy_constructor:Proto.Common.TextureProto)
}

void TextureProto::SharedCtor() {
  x_ = 0u;
}

TextureProto::~TextureProto() {
  // @@protoc_insertion_point(destructor:Proto.Common.TextureProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TextureProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TextureProto::ArenaDtor(void* object) {
  TextureProto* _this = reinterpret_cast< TextureProto* >(object);
  (void)_this;
}
void TextureProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextureProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TextureProto& TextureProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TextureProto_proto_2fCommon_2eproto.base);
  return *internal_default_instance();
}


void TextureProto::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Common.TextureProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  x_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextureProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextureProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Common.TextureProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_x(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Common.TextureProto)
  return target;
}

size_t TextureProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Common.TextureProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_x());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextureProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.Common.TextureProto)
  GOOGLE_DCHECK_NE(&from, this);
  const TextureProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TextureProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.Common.TextureProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.Common.TextureProto)
    MergeFrom(*source);
  }
}

void TextureProto::MergeFrom(const TextureProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Common.TextureProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
}

void TextureProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.Common.TextureProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextureProto::CopyFrom(const TextureProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Common.TextureProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextureProto::IsInitialized() const {
  return true;
}

void TextureProto::InternalSwap(TextureProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(x_, other->x_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TextureProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ObjectProto::_Internal {
 public:
  static const ::Proto::Common::ShaderProto& shader(const ObjectProto* msg);
};

const ::Proto::Common::ShaderProto&
ObjectProto::_Internal::shader(const ObjectProto* msg) {
  return *msg->shader_;
}
ObjectProto::ObjectProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  texture_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.Common.ObjectProto)
}
ObjectProto::ObjectProto(const ObjectProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      texture_(from.texture_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shader()) {
    shader_ = new ::Proto::Common::ShaderProto(*from.shader_);
  } else {
    shader_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Proto.Common.ObjectProto)
}

void ObjectProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectProto_proto_2fCommon_2eproto.base);
  shader_ = nullptr;
}

ObjectProto::~ObjectProto() {
  // @@protoc_insertion_point(destructor:Proto.Common.ObjectProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete shader_;
}

void ObjectProto::ArenaDtor(void* object) {
  ObjectProto* _this = reinterpret_cast< ObjectProto* >(object);
  (void)_this;
}
void ObjectProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectProto& ObjectProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectProto_proto_2fCommon_2eproto.base);
  return *internal_default_instance();
}


void ObjectProto::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Common.ObjectProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  texture_.Clear();
  if (GetArena() == nullptr && shader_ != nullptr) {
    delete shader_;
  }
  shader_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Proto.Common.ShaderProto shader = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.Common.TextureProto texture = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_texture(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Common.ObjectProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.Common.ShaderProto shader = 1;
  if (this->has_shader()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::shader(this), target, stream);
  }

  // repeated .Proto.Common.TextureProto texture = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_texture_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_texture(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Common.ObjectProto)
  return target;
}

size_t ObjectProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Common.ObjectProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.Common.TextureProto texture = 2;
  total_size += 1UL * this->_internal_texture_size();
  for (const auto& msg : this->texture_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Proto.Common.ShaderProto shader = 1;
  if (this->has_shader()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shader_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.Common.ObjectProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.Common.ObjectProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.Common.ObjectProto)
    MergeFrom(*source);
  }
}

void ObjectProto::MergeFrom(const ObjectProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Common.ObjectProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  texture_.MergeFrom(from.texture_);
  if (from.has_shader()) {
    _internal_mutable_shader()->::Proto::Common::ShaderProto::MergeFrom(from._internal_shader());
  }
}

void ObjectProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.Common.ObjectProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectProto::CopyFrom(const ObjectProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Common.ObjectProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectProto::IsInitialized() const {
  return true;
}

void ObjectProto::InternalSwap(ObjectProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  texture_.InternalSwap(&other->texture_);
  swap(shader_, other->shader_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LightProto::_Internal {
 public:
};

LightProto::LightProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.Common.LightProto)
}
LightProto::LightProto(const LightProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:Proto.Common.LightProto)
}

void LightProto::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

LightProto::~LightProto() {
  // @@protoc_insertion_point(destructor:Proto.Common.LightProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LightProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LightProto::ArenaDtor(void* object) {
  LightProto* _this = reinterpret_cast< LightProto* >(object);
  (void)_this;
}
void LightProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LightProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LightProto& LightProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LightProto_proto_2fCommon_2eproto.base);
  return *internal_default_instance();
}


void LightProto::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Common.LightProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LightProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LightProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Common.LightProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_x(), target);
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_y(), target);
  }

  // uint32 z = 3;
  if (this->z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Common.LightProto)
  return target;
}

size_t LightProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Common.LightProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_x());
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_y());
  }

  // uint32 z = 3;
  if (this->z() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_z());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LightProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.Common.LightProto)
  GOOGLE_DCHECK_NE(&from, this);
  const LightProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LightProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.Common.LightProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.Common.LightProto)
    MergeFrom(*source);
  }
}

void LightProto::MergeFrom(const LightProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Common.LightProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from.z() != 0) {
    _internal_set_z(from._internal_z());
  }
}

void LightProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.Common.LightProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LightProto::CopyFrom(const LightProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Common.LightProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightProto::IsInitialized() const {
  return true;
}

void LightProto::InternalSwap(LightProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LightProto, z_)
      + sizeof(LightProto::z_)
      - PROTOBUF_FIELD_OFFSET(LightProto, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LightProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Common
}  // namespace Proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Proto::Common::EngineData* Arena::CreateMaybeMessage< ::Proto::Common::EngineData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::Common::EngineData >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::Common::CameraProto* Arena::CreateMaybeMessage< ::Proto::Common::CameraProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::Common::CameraProto >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::Common::ShaderProto* Arena::CreateMaybeMessage< ::Proto::Common::ShaderProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::Common::ShaderProto >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::Common::TextureProto* Arena::CreateMaybeMessage< ::Proto::Common::TextureProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::Common::TextureProto >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::Common::ObjectProto* Arena::CreateMaybeMessage< ::Proto::Common::ObjectProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::Common::ObjectProto >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::Common::LightProto* Arena::CreateMaybeMessage< ::Proto::Common::LightProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::Common::LightProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
