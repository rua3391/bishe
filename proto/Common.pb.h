// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common.proto

#ifndef PROTOBUF_INCLUDED_Common_2eproto
#define PROTOBUF_INCLUDED_Common_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Common_2eproto 

namespace protobuf_Common_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Common_2eproto
namespace Proto {
namespace Common {
class CameraProto;
class CameraProtoDefaultTypeInternal;
extern CameraProtoDefaultTypeInternal _CameraProto_default_instance_;
class EngineData;
class EngineDataDefaultTypeInternal;
extern EngineDataDefaultTypeInternal _EngineData_default_instance_;
class LightProto;
class LightProtoDefaultTypeInternal;
extern LightProtoDefaultTypeInternal _LightProto_default_instance_;
class ObjectProto;
class ObjectProtoDefaultTypeInternal;
extern ObjectProtoDefaultTypeInternal _ObjectProto_default_instance_;
class ShaderProto;
class ShaderProtoDefaultTypeInternal;
extern ShaderProtoDefaultTypeInternal _ShaderProto_default_instance_;
class TextureProto;
class TextureProtoDefaultTypeInternal;
extern TextureProtoDefaultTypeInternal _TextureProto_default_instance_;
}  // namespace Common
}  // namespace Proto
namespace google {
namespace protobuf {
template<> ::Proto::Common::CameraProto* Arena::CreateMaybeMessage<::Proto::Common::CameraProto>(Arena*);
template<> ::Proto::Common::EngineData* Arena::CreateMaybeMessage<::Proto::Common::EngineData>(Arena*);
template<> ::Proto::Common::LightProto* Arena::CreateMaybeMessage<::Proto::Common::LightProto>(Arena*);
template<> ::Proto::Common::ObjectProto* Arena::CreateMaybeMessage<::Proto::Common::ObjectProto>(Arena*);
template<> ::Proto::Common::ShaderProto* Arena::CreateMaybeMessage<::Proto::Common::ShaderProto>(Arena*);
template<> ::Proto::Common::TextureProto* Arena::CreateMaybeMessage<::Proto::Common::TextureProto>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Proto {
namespace Common {

// ===================================================================

class EngineData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.Common.EngineData) */ {
 public:
  EngineData();
  virtual ~EngineData();

  EngineData(const EngineData& from);

  inline EngineData& operator=(const EngineData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EngineData(EngineData&& from) noexcept
    : EngineData() {
    *this = ::std::move(from);
  }

  inline EngineData& operator=(EngineData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EngineData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EngineData* internal_default_instance() {
    return reinterpret_cast<const EngineData*>(
               &_EngineData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(EngineData* other);
  friend void swap(EngineData& a, EngineData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EngineData* New() const final {
    return CreateMaybeMessage<EngineData>(NULL);
  }

  EngineData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EngineData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EngineData& from);
  void MergeFrom(const EngineData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EngineData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Proto.Common.ObjectProto object = 2;
  int object_size() const;
  void clear_object();
  static const int kObjectFieldNumber = 2;
  ::Proto::Common::ObjectProto* mutable_object(int index);
  ::google::protobuf::RepeatedPtrField< ::Proto::Common::ObjectProto >*
      mutable_object();
  const ::Proto::Common::ObjectProto& object(int index) const;
  ::Proto::Common::ObjectProto* add_object();
  const ::google::protobuf::RepeatedPtrField< ::Proto::Common::ObjectProto >&
      object() const;

  // .Proto.Common.CameraProto camera = 1;
  bool has_camera() const;
  void clear_camera();
  static const int kCameraFieldNumber = 1;
  private:
  const ::Proto::Common::CameraProto& _internal_camera() const;
  public:
  const ::Proto::Common::CameraProto& camera() const;
  ::Proto::Common::CameraProto* release_camera();
  ::Proto::Common::CameraProto* mutable_camera();
  void set_allocated_camera(::Proto::Common::CameraProto* camera);

  // @@protoc_insertion_point(class_scope:Proto.Common.EngineData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Proto::Common::ObjectProto > object_;
  ::Proto::Common::CameraProto* camera_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CameraProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.Common.CameraProto) */ {
 public:
  CameraProto();
  virtual ~CameraProto();

  CameraProto(const CameraProto& from);

  inline CameraProto& operator=(const CameraProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraProto(CameraProto&& from) noexcept
    : CameraProto() {
    *this = ::std::move(from);
  }

  inline CameraProto& operator=(CameraProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraProto* internal_default_instance() {
    return reinterpret_cast<const CameraProto*>(
               &_CameraProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CameraProto* other);
  friend void swap(CameraProto& a, CameraProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraProto* New() const final {
    return CreateMaybeMessage<CameraProto>(NULL);
  }

  CameraProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CameraProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CameraProto& from);
  void MergeFrom(const CameraProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Proto.Common.CameraProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShaderProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.Common.ShaderProto) */ {
 public:
  ShaderProto();
  virtual ~ShaderProto();

  ShaderProto(const ShaderProto& from);

  inline ShaderProto& operator=(const ShaderProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShaderProto(ShaderProto&& from) noexcept
    : ShaderProto() {
    *this = ::std::move(from);
  }

  inline ShaderProto& operator=(ShaderProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShaderProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShaderProto* internal_default_instance() {
    return reinterpret_cast<const ShaderProto*>(
               &_ShaderProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ShaderProto* other);
  friend void swap(ShaderProto& a, ShaderProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShaderProto* New() const final {
    return CreateMaybeMessage<ShaderProto>(NULL);
  }

  ShaderProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShaderProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShaderProto& from);
  void MergeFrom(const ShaderProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShaderProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::uint32 x() const;
  void set_x(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Proto.Common.ShaderProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 x_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TextureProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.Common.TextureProto) */ {
 public:
  TextureProto();
  virtual ~TextureProto();

  TextureProto(const TextureProto& from);

  inline TextureProto& operator=(const TextureProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TextureProto(TextureProto&& from) noexcept
    : TextureProto() {
    *this = ::std::move(from);
  }

  inline TextureProto& operator=(TextureProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TextureProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TextureProto* internal_default_instance() {
    return reinterpret_cast<const TextureProto*>(
               &_TextureProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TextureProto* other);
  friend void swap(TextureProto& a, TextureProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TextureProto* New() const final {
    return CreateMaybeMessage<TextureProto>(NULL);
  }

  TextureProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TextureProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TextureProto& from);
  void MergeFrom(const TextureProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextureProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::uint32 x() const;
  void set_x(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Proto.Common.TextureProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 x_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ObjectProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.Common.ObjectProto) */ {
 public:
  ObjectProto();
  virtual ~ObjectProto();

  ObjectProto(const ObjectProto& from);

  inline ObjectProto& operator=(const ObjectProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectProto(ObjectProto&& from) noexcept
    : ObjectProto() {
    *this = ::std::move(from);
  }

  inline ObjectProto& operator=(ObjectProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectProto* internal_default_instance() {
    return reinterpret_cast<const ObjectProto*>(
               &_ObjectProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ObjectProto* other);
  friend void swap(ObjectProto& a, ObjectProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectProto* New() const final {
    return CreateMaybeMessage<ObjectProto>(NULL);
  }

  ObjectProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObjectProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObjectProto& from);
  void MergeFrom(const ObjectProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Proto.Common.TextureProto texture = 2;
  int texture_size() const;
  void clear_texture();
  static const int kTextureFieldNumber = 2;
  ::Proto::Common::TextureProto* mutable_texture(int index);
  ::google::protobuf::RepeatedPtrField< ::Proto::Common::TextureProto >*
      mutable_texture();
  const ::Proto::Common::TextureProto& texture(int index) const;
  ::Proto::Common::TextureProto* add_texture();
  const ::google::protobuf::RepeatedPtrField< ::Proto::Common::TextureProto >&
      texture() const;

  // .Proto.Common.ShaderProto shader = 1;
  bool has_shader() const;
  void clear_shader();
  static const int kShaderFieldNumber = 1;
  private:
  const ::Proto::Common::ShaderProto& _internal_shader() const;
  public:
  const ::Proto::Common::ShaderProto& shader() const;
  ::Proto::Common::ShaderProto* release_shader();
  ::Proto::Common::ShaderProto* mutable_shader();
  void set_allocated_shader(::Proto::Common::ShaderProto* shader);

  // @@protoc_insertion_point(class_scope:Proto.Common.ObjectProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Proto::Common::TextureProto > texture_;
  ::Proto::Common::ShaderProto* shader_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LightProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.Common.LightProto) */ {
 public:
  LightProto();
  virtual ~LightProto();

  LightProto(const LightProto& from);

  inline LightProto& operator=(const LightProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LightProto(LightProto&& from) noexcept
    : LightProto() {
    *this = ::std::move(from);
  }

  inline LightProto& operator=(LightProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LightProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LightProto* internal_default_instance() {
    return reinterpret_cast<const LightProto*>(
               &_LightProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(LightProto* other);
  friend void swap(LightProto& a, LightProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LightProto* New() const final {
    return CreateMaybeMessage<LightProto>(NULL);
  }

  LightProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LightProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LightProto& from);
  void MergeFrom(const LightProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LightProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::uint32 x() const;
  void set_x(::google::protobuf::uint32 value);

  // uint32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::uint32 y() const;
  void set_y(::google::protobuf::uint32 value);

  // uint32 z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  ::google::protobuf::uint32 z() const;
  void set_z(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Proto.Common.LightProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  ::google::protobuf::uint32 z_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Common_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EngineData

// .Proto.Common.CameraProto camera = 1;
inline bool EngineData::has_camera() const {
  return this != internal_default_instance() && camera_ != NULL;
}
inline void EngineData::clear_camera() {
  if (GetArenaNoVirtual() == NULL && camera_ != NULL) {
    delete camera_;
  }
  camera_ = NULL;
}
inline const ::Proto::Common::CameraProto& EngineData::_internal_camera() const {
  return *camera_;
}
inline const ::Proto::Common::CameraProto& EngineData::camera() const {
  const ::Proto::Common::CameraProto* p = camera_;
  // @@protoc_insertion_point(field_get:Proto.Common.EngineData.camera)
  return p != NULL ? *p : *reinterpret_cast<const ::Proto::Common::CameraProto*>(
      &::Proto::Common::_CameraProto_default_instance_);
}
inline ::Proto::Common::CameraProto* EngineData::release_camera() {
  // @@protoc_insertion_point(field_release:Proto.Common.EngineData.camera)
  
  ::Proto::Common::CameraProto* temp = camera_;
  camera_ = NULL;
  return temp;
}
inline ::Proto::Common::CameraProto* EngineData::mutable_camera() {
  
  if (camera_ == NULL) {
    auto* p = CreateMaybeMessage<::Proto::Common::CameraProto>(GetArenaNoVirtual());
    camera_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.Common.EngineData.camera)
  return camera_;
}
inline void EngineData::set_allocated_camera(::Proto::Common::CameraProto* camera) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete camera_;
  }
  if (camera) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      camera = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, camera, submessage_arena);
    }
    
  } else {
    
  }
  camera_ = camera;
  // @@protoc_insertion_point(field_set_allocated:Proto.Common.EngineData.camera)
}

// repeated .Proto.Common.ObjectProto object = 2;
inline int EngineData::object_size() const {
  return object_.size();
}
inline void EngineData::clear_object() {
  object_.Clear();
}
inline ::Proto::Common::ObjectProto* EngineData::mutable_object(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.Common.EngineData.object)
  return object_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Proto::Common::ObjectProto >*
EngineData::mutable_object() {
  // @@protoc_insertion_point(field_mutable_list:Proto.Common.EngineData.object)
  return &object_;
}
inline const ::Proto::Common::ObjectProto& EngineData::object(int index) const {
  // @@protoc_insertion_point(field_get:Proto.Common.EngineData.object)
  return object_.Get(index);
}
inline ::Proto::Common::ObjectProto* EngineData::add_object() {
  // @@protoc_insertion_point(field_add:Proto.Common.EngineData.object)
  return object_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Proto::Common::ObjectProto >&
EngineData::object() const {
  // @@protoc_insertion_point(field_list:Proto.Common.EngineData.object)
  return object_;
}

// -------------------------------------------------------------------

// CameraProto

// -------------------------------------------------------------------

// ShaderProto

// uint32 x = 1;
inline void ShaderProto::clear_x() {
  x_ = 0u;
}
inline ::google::protobuf::uint32 ShaderProto::x() const {
  // @@protoc_insertion_point(field_get:Proto.Common.ShaderProto.x)
  return x_;
}
inline void ShaderProto::set_x(::google::protobuf::uint32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Proto.Common.ShaderProto.x)
}

// -------------------------------------------------------------------

// TextureProto

// uint32 x = 1;
inline void TextureProto::clear_x() {
  x_ = 0u;
}
inline ::google::protobuf::uint32 TextureProto::x() const {
  // @@protoc_insertion_point(field_get:Proto.Common.TextureProto.x)
  return x_;
}
inline void TextureProto::set_x(::google::protobuf::uint32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Proto.Common.TextureProto.x)
}

// -------------------------------------------------------------------

// ObjectProto

// .Proto.Common.ShaderProto shader = 1;
inline bool ObjectProto::has_shader() const {
  return this != internal_default_instance() && shader_ != NULL;
}
inline void ObjectProto::clear_shader() {
  if (GetArenaNoVirtual() == NULL && shader_ != NULL) {
    delete shader_;
  }
  shader_ = NULL;
}
inline const ::Proto::Common::ShaderProto& ObjectProto::_internal_shader() const {
  return *shader_;
}
inline const ::Proto::Common::ShaderProto& ObjectProto::shader() const {
  const ::Proto::Common::ShaderProto* p = shader_;
  // @@protoc_insertion_point(field_get:Proto.Common.ObjectProto.shader)
  return p != NULL ? *p : *reinterpret_cast<const ::Proto::Common::ShaderProto*>(
      &::Proto::Common::_ShaderProto_default_instance_);
}
inline ::Proto::Common::ShaderProto* ObjectProto::release_shader() {
  // @@protoc_insertion_point(field_release:Proto.Common.ObjectProto.shader)
  
  ::Proto::Common::ShaderProto* temp = shader_;
  shader_ = NULL;
  return temp;
}
inline ::Proto::Common::ShaderProto* ObjectProto::mutable_shader() {
  
  if (shader_ == NULL) {
    auto* p = CreateMaybeMessage<::Proto::Common::ShaderProto>(GetArenaNoVirtual());
    shader_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.Common.ObjectProto.shader)
  return shader_;
}
inline void ObjectProto::set_allocated_shader(::Proto::Common::ShaderProto* shader) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shader_;
  }
  if (shader) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      shader = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shader, submessage_arena);
    }
    
  } else {
    
  }
  shader_ = shader;
  // @@protoc_insertion_point(field_set_allocated:Proto.Common.ObjectProto.shader)
}

// repeated .Proto.Common.TextureProto texture = 2;
inline int ObjectProto::texture_size() const {
  return texture_.size();
}
inline void ObjectProto::clear_texture() {
  texture_.Clear();
}
inline ::Proto::Common::TextureProto* ObjectProto::mutable_texture(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.Common.ObjectProto.texture)
  return texture_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Proto::Common::TextureProto >*
ObjectProto::mutable_texture() {
  // @@protoc_insertion_point(field_mutable_list:Proto.Common.ObjectProto.texture)
  return &texture_;
}
inline const ::Proto::Common::TextureProto& ObjectProto::texture(int index) const {
  // @@protoc_insertion_point(field_get:Proto.Common.ObjectProto.texture)
  return texture_.Get(index);
}
inline ::Proto::Common::TextureProto* ObjectProto::add_texture() {
  // @@protoc_insertion_point(field_add:Proto.Common.ObjectProto.texture)
  return texture_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Proto::Common::TextureProto >&
ObjectProto::texture() const {
  // @@protoc_insertion_point(field_list:Proto.Common.ObjectProto.texture)
  return texture_;
}

// -------------------------------------------------------------------

// LightProto

// uint32 x = 1;
inline void LightProto::clear_x() {
  x_ = 0u;
}
inline ::google::protobuf::uint32 LightProto::x() const {
  // @@protoc_insertion_point(field_get:Proto.Common.LightProto.x)
  return x_;
}
inline void LightProto::set_x(::google::protobuf::uint32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Proto.Common.LightProto.x)
}

// uint32 y = 2;
inline void LightProto::clear_y() {
  y_ = 0u;
}
inline ::google::protobuf::uint32 LightProto::y() const {
  // @@protoc_insertion_point(field_get:Proto.Common.LightProto.y)
  return y_;
}
inline void LightProto::set_y(::google::protobuf::uint32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Proto.Common.LightProto.y)
}

// uint32 z = 3;
inline void LightProto::clear_z() {
  z_ = 0u;
}
inline ::google::protobuf::uint32 LightProto::z() const {
  // @@protoc_insertion_point(field_get:Proto.Common.LightProto.z)
  return z_;
}
inline void LightProto::set_z(::google::protobuf::uint32 value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:Proto.Common.LightProto.z)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Common
}  // namespace Proto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Common_2eproto
