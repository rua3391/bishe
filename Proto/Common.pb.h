// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Proto/Common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Proto_2fCommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Proto_2fCommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Proto_2fCommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Proto_2fCommon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Proto_2fCommon_2eproto;
namespace Proto {
namespace Common {
class Camera_Proto;
class Camera_ProtoDefaultTypeInternal;
extern Camera_ProtoDefaultTypeInternal _Camera_Proto_default_instance_;
class EngineData;
class EngineDataDefaultTypeInternal;
extern EngineDataDefaultTypeInternal _EngineData_default_instance_;
class Shader_Proto;
class Shader_ProtoDefaultTypeInternal;
extern Shader_ProtoDefaultTypeInternal _Shader_Proto_default_instance_;
}  // namespace Common
}  // namespace Proto
PROTOBUF_NAMESPACE_OPEN
template<> ::Proto::Common::Camera_Proto* Arena::CreateMaybeMessage<::Proto::Common::Camera_Proto>(Arena*);
template<> ::Proto::Common::EngineData* Arena::CreateMaybeMessage<::Proto::Common::EngineData>(Arena*);
template<> ::Proto::Common::Shader_Proto* Arena::CreateMaybeMessage<::Proto::Common::Shader_Proto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Proto {
namespace Common {

// ===================================================================

class EngineData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Common.EngineData) */ {
 public:
  inline EngineData() : EngineData(nullptr) {}
  virtual ~EngineData();

  EngineData(const EngineData& from);
  EngineData(EngineData&& from) noexcept
    : EngineData() {
    *this = ::std::move(from);
  }

  inline EngineData& operator=(const EngineData& from) {
    CopyFrom(from);
    return *this;
  }
  inline EngineData& operator=(EngineData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EngineData& default_instance();

  static inline const EngineData* internal_default_instance() {
    return reinterpret_cast<const EngineData*>(
               &_EngineData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EngineData& a, EngineData& b) {
    a.Swap(&b);
  }
  inline void Swap(EngineData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EngineData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EngineData* New() const final {
    return CreateMaybeMessage<EngineData>(nullptr);
  }

  EngineData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EngineData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EngineData& from);
  void MergeFrom(const EngineData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EngineData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Common.EngineData";
  }
  protected:
  explicit EngineData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Proto_2fCommon_2eproto);
    return ::descriptor_table_Proto_2fCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraFieldNumber = 1,
    kShaderFieldNumber = 2,
  };
  // .Proto.Common.Camera_Proto camera = 1;
  bool has_camera() const;
  private:
  bool _internal_has_camera() const;
  public:
  void clear_camera();
  const ::Proto::Common::Camera_Proto& camera() const;
  ::Proto::Common::Camera_Proto* release_camera();
  ::Proto::Common::Camera_Proto* mutable_camera();
  void set_allocated_camera(::Proto::Common::Camera_Proto* camera);
  private:
  const ::Proto::Common::Camera_Proto& _internal_camera() const;
  ::Proto::Common::Camera_Proto* _internal_mutable_camera();
  public:
  void unsafe_arena_set_allocated_camera(
      ::Proto::Common::Camera_Proto* camera);
  ::Proto::Common::Camera_Proto* unsafe_arena_release_camera();

  // .Proto.Common.Shader_Proto shader = 2;
  bool has_shader() const;
  private:
  bool _internal_has_shader() const;
  public:
  void clear_shader();
  const ::Proto::Common::Shader_Proto& shader() const;
  ::Proto::Common::Shader_Proto* release_shader();
  ::Proto::Common::Shader_Proto* mutable_shader();
  void set_allocated_shader(::Proto::Common::Shader_Proto* shader);
  private:
  const ::Proto::Common::Shader_Proto& _internal_shader() const;
  ::Proto::Common::Shader_Proto* _internal_mutable_shader();
  public:
  void unsafe_arena_set_allocated_shader(
      ::Proto::Common::Shader_Proto* shader);
  ::Proto::Common::Shader_Proto* unsafe_arena_release_shader();

  // @@protoc_insertion_point(class_scope:Proto.Common.EngineData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Proto::Common::Camera_Proto* camera_;
  ::Proto::Common::Shader_Proto* shader_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Proto_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class Camera_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Common.Camera_Proto) */ {
 public:
  inline Camera_Proto() : Camera_Proto(nullptr) {}
  virtual ~Camera_Proto();

  Camera_Proto(const Camera_Proto& from);
  Camera_Proto(Camera_Proto&& from) noexcept
    : Camera_Proto() {
    *this = ::std::move(from);
  }

  inline Camera_Proto& operator=(const Camera_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline Camera_Proto& operator=(Camera_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Camera_Proto& default_instance();

  static inline const Camera_Proto* internal_default_instance() {
    return reinterpret_cast<const Camera_Proto*>(
               &_Camera_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Camera_Proto& a, Camera_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(Camera_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Camera_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Camera_Proto* New() const final {
    return CreateMaybeMessage<Camera_Proto>(nullptr);
  }

  Camera_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Camera_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Camera_Proto& from);
  void MergeFrom(const Camera_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Camera_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Common.Camera_Proto";
  }
  protected:
  explicit Camera_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Proto_2fCommon_2eproto);
    return ::descriptor_table_Proto_2fCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Proto.Common.Camera_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Proto_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class Shader_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Common.Shader_Proto) */ {
 public:
  inline Shader_Proto() : Shader_Proto(nullptr) {}
  virtual ~Shader_Proto();

  Shader_Proto(const Shader_Proto& from);
  Shader_Proto(Shader_Proto&& from) noexcept
    : Shader_Proto() {
    *this = ::std::move(from);
  }

  inline Shader_Proto& operator=(const Shader_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline Shader_Proto& operator=(Shader_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Shader_Proto& default_instance();

  static inline const Shader_Proto* internal_default_instance() {
    return reinterpret_cast<const Shader_Proto*>(
               &_Shader_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Shader_Proto& a, Shader_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(Shader_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Shader_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Shader_Proto* New() const final {
    return CreateMaybeMessage<Shader_Proto>(nullptr);
  }

  Shader_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Shader_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Shader_Proto& from);
  void MergeFrom(const Shader_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Shader_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Common.Shader_Proto";
  }
  protected:
  explicit Shader_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Proto_2fCommon_2eproto);
    return ::descriptor_table_Proto_2fCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Proto.Common.Shader_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Proto_2fCommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EngineData

// .Proto.Common.Camera_Proto camera = 1;
inline bool EngineData::_internal_has_camera() const {
  return this != internal_default_instance() && camera_ != nullptr;
}
inline bool EngineData::has_camera() const {
  return _internal_has_camera();
}
inline void EngineData::clear_camera() {
  if (GetArena() == nullptr && camera_ != nullptr) {
    delete camera_;
  }
  camera_ = nullptr;
}
inline const ::Proto::Common::Camera_Proto& EngineData::_internal_camera() const {
  const ::Proto::Common::Camera_Proto* p = camera_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::Common::Camera_Proto&>(
      ::Proto::Common::_Camera_Proto_default_instance_);
}
inline const ::Proto::Common::Camera_Proto& EngineData::camera() const {
  // @@protoc_insertion_point(field_get:Proto.Common.EngineData.camera)
  return _internal_camera();
}
inline void EngineData::unsafe_arena_set_allocated_camera(
    ::Proto::Common::Camera_Proto* camera) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_);
  }
  camera_ = camera;
  if (camera) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Common.EngineData.camera)
}
inline ::Proto::Common::Camera_Proto* EngineData::release_camera() {
  
  ::Proto::Common::Camera_Proto* temp = camera_;
  camera_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::Common::Camera_Proto* EngineData::unsafe_arena_release_camera() {
  // @@protoc_insertion_point(field_release:Proto.Common.EngineData.camera)
  
  ::Proto::Common::Camera_Proto* temp = camera_;
  camera_ = nullptr;
  return temp;
}
inline ::Proto::Common::Camera_Proto* EngineData::_internal_mutable_camera() {
  
  if (camera_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Common::Camera_Proto>(GetArena());
    camera_ = p;
  }
  return camera_;
}
inline ::Proto::Common::Camera_Proto* EngineData::mutable_camera() {
  // @@protoc_insertion_point(field_mutable:Proto.Common.EngineData.camera)
  return _internal_mutable_camera();
}
inline void EngineData::set_allocated_camera(::Proto::Common::Camera_Proto* camera) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete camera_;
  }
  if (camera) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(camera);
    if (message_arena != submessage_arena) {
      camera = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera, submessage_arena);
    }
    
  } else {
    
  }
  camera_ = camera;
  // @@protoc_insertion_point(field_set_allocated:Proto.Common.EngineData.camera)
}

// .Proto.Common.Shader_Proto shader = 2;
inline bool EngineData::_internal_has_shader() const {
  return this != internal_default_instance() && shader_ != nullptr;
}
inline bool EngineData::has_shader() const {
  return _internal_has_shader();
}
inline void EngineData::clear_shader() {
  if (GetArena() == nullptr && shader_ != nullptr) {
    delete shader_;
  }
  shader_ = nullptr;
}
inline const ::Proto::Common::Shader_Proto& EngineData::_internal_shader() const {
  const ::Proto::Common::Shader_Proto* p = shader_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::Common::Shader_Proto&>(
      ::Proto::Common::_Shader_Proto_default_instance_);
}
inline const ::Proto::Common::Shader_Proto& EngineData::shader() const {
  // @@protoc_insertion_point(field_get:Proto.Common.EngineData.shader)
  return _internal_shader();
}
inline void EngineData::unsafe_arena_set_allocated_shader(
    ::Proto::Common::Shader_Proto* shader) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shader_);
  }
  shader_ = shader;
  if (shader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Common.EngineData.shader)
}
inline ::Proto::Common::Shader_Proto* EngineData::release_shader() {
  
  ::Proto::Common::Shader_Proto* temp = shader_;
  shader_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto::Common::Shader_Proto* EngineData::unsafe_arena_release_shader() {
  // @@protoc_insertion_point(field_release:Proto.Common.EngineData.shader)
  
  ::Proto::Common::Shader_Proto* temp = shader_;
  shader_ = nullptr;
  return temp;
}
inline ::Proto::Common::Shader_Proto* EngineData::_internal_mutable_shader() {
  
  if (shader_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Common::Shader_Proto>(GetArena());
    shader_ = p;
  }
  return shader_;
}
inline ::Proto::Common::Shader_Proto* EngineData::mutable_shader() {
  // @@protoc_insertion_point(field_mutable:Proto.Common.EngineData.shader)
  return _internal_mutable_shader();
}
inline void EngineData::set_allocated_shader(::Proto::Common::Shader_Proto* shader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shader_;
  }
  if (shader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shader);
    if (message_arena != submessage_arena) {
      shader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shader, submessage_arena);
    }
    
  } else {
    
  }
  shader_ = shader;
  // @@protoc_insertion_point(field_set_allocated:Proto.Common.EngineData.shader)
}

// -------------------------------------------------------------------

// Camera_Proto

// -------------------------------------------------------------------

// Shader_Proto

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Common
}  // namespace Proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Proto_2fCommon_2eproto
